(* Configuration file for the "netplex" program. *)

netplex {
	controller {
		max_level = "Crit";    (* Log level *)
			logging {
				type = "stderr";    (* Log to stderr *)
			}
	};
	service {
		name = "nethttpd";
		protocol {
			(* This section creates the socket *)
				name = "http";
			address {
				type = "internet";
				bind = "0.0.0.0:8111";
			};
			tcp_nodelay = true;
			(*
			 address {
			 type = "internet";
			 bind = "[::1]:4445";   (* IPv6 example *)
			 }
			 *)
		};
		processor {
			(* This section specifies how to process data of the socket *)
				type = "nethttpd";
			access_log = "off";  (* or "off" or "enabled" *)
				suppress_broken_pipe = true;
			host {
				(* Think of Apache's "virtual hosts" *)
					pref_port = 8111;
				names = "*:0";   (* Which requests are matched here: all *)
					uri {
						path = "/";
						service {
							type = "file";
							docroot = "/Users/ontologiae/Documents/Projets/COWEBO/CoweboDev/InfraClientWeb/mandarine/";
							media_types_file = "/etc/mime.types";
							enable_listings = true;
						}
					};

				uri {
					path = "/sqldesigner/";
					service {
						type = "file";
						docroot = "/Users/ontologiae/Documents/Projets/COWEBO/CoweboDev/Etudes/wwwsqldesigner-2.6/";
						media_types_file = "/etc/mime.types";
						enable_listings = true;
					}
				};

				uri {
					path = "/cgi_compteur";  
					service {
						type = "dynamic";
						handler = "cgi_compteur";
					}
				};
				uri {
					path = "/demande_inscription_physique";  
					service {
						type = "dynamic";
						handler = "demande_inscription_physique";
					}
				};
				uri {
					path = "/demande_inscription_morale";  
					service {
						type = "dynamic";
						handler = "demande_inscription_morale";
					}
				};
                
                uri {
                    path = "/creer_utilisateur_societe";
                    service {
                        type = "dynamic";
                        handler = "creer_utilisateur_societe";
                    }
                };

                uri {
                    path = "/demande_ajout_piece_pour_dossier";
                    service {
                        type = "dynamic";
                        handler = "demande_ajout_piece_pour_dossier";
                    }
                };

                uri {
                    path = "/confirme_Inscription_cgi";
                    service {
                        type = "dynamic";
                        handler = "confirme_Inscription_cgi";
                    }
                };
                                uri {
                                        path = "/get_liste_contacts";
                                        service {
                                                type = "dynamic";
                                                handler = "get_liste_contacts_cgi";
                                        }
                                };
				uri {
					path = "/post_message";
                                        service {
                                                type = "dynamic";
                                                handler = "post_message_cgi";
                                        }
                                };

				uri {
					path = "/get_last_n_messages";
                                        service {
                                                type = "dynamic";
                                                handler = "get_last_n_messages_cgi";
                                        }
                                };


				uri {
					path = "/jls_args";  
					service {
						type = "dynamic";
						handler = "jls_args";
					}
				};
				uri {
					path = "/recherche_texte";
                                        service {
                                                type = "dynamic";
                                                handler = "recherche_texte";
                                        }
                                };
				uri {
					path = "/creer_rep";  
					service {
						type = "dynamic";
						handler = "creer_rep";
					}
				};
				uri {
					path = "/upload";  
					service {
						type = "dynamic";
						handler = "upload";
					}
				};
				uri {
					path = "/download_service";  
					service {
						type = "dynamic";
						handler = "download_service";
					}
				};
				uri {
					path = "/supression_fichier_dossier_service";  
					service {
						type = "dynamic";
						handler = "supression_fichier_dossier_service";
					}
				};
				uri {
					path = "/renvoyer_salt";  
					service {
						type = "dynamic";
						handler = "renvoyer_salt";
					}
				};
				uri {
					path="/creer_cercle_sans_user_cgi";
					service {
						type = "dynamic";
						handler = "creer_cercle_sans_user_cgi";
					}
				};

				uri {
					path="/supprimer_cercle_cgi";
					service {
						type = "dynamic";
						handler = "supprimer_cercle_cgi";
					}
				};

				uri {
					path="/ajouter_utilisateur_cercle_cgi";
					service {
						type = "dynamic";
						handler = "ajouter_utilisateur_cercle_cgi";
					}
				};

				uri {
					path="/supprimer_utilisateur_cercle_cgi";
					service {
						type = "dynamic";
						handler = "supprimer_utilisateur_cercle_cgi";
					}
				};

				uri {
					path="/ajouter_partage_cercle_cgi";
					service {
						type = "dynamic";
						handler = "ajouter_partage_cercle_cgi";
					}
				};

				uri {
					path="/supprimer_partage_cercle_cgi";
					service {
						type = "dynamic";
						handler = "supprimer_partage_cercle_cgi";
					}
				};
				uri {
					path="/info_cercles_cgi";
					service {
						type = "dynamic";
						handler = "info_cercles_cgi";
					}
				};
                                uri {
                                        path="/miniature";
                                        service {
                                                type = "dynamic";
                                                handler = "miniature";
                                        }
                                };

				uri {
					path="/arborescence_userHome_cgi";
					service {
						type = "dynamic";
						handler = "arborescence_userHome_cgi";
					}
				};
				uri {
					path="/ordre_signature_cgi";
					service {
						type = "dynamic";
						handler = "ordre_signature_cgi";
					}
				};
				uri {
					path="/get_portefeuille_cgi";
					service {
						type = "dynamic";
						handler = "get_portefeuille_cgi";
					}
				};
				uri {
					path="/set_portefeuille_cgi";
					service {
						type = "dynamic";
						handler = "set_portefeuille_cgi";
					}
				};


				uri {
					path="/TESTS_GETCLE";
					service {
						type = "dynamic";
						handler = "TESTS_GETCLE";
					}
				};





			};
		};
		workload_manager {
			type = "dynamic";
			max_jobs_per_thread = 1;  (* Everything else is senseless *)
				min_free_jobs_capacity = 1;
			max_free_jobs_capacity = 1;
			max_threads = 20;

		};
	}
}
